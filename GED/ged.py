# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ta7xhn0pwC0SN0PVIwEu2AtYBLzHIZu7
"""

import nltk
nltk.download()

from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import networkx as nx

import numpy as np
def levenshtein_distance(str1, str2):
    m = len(str1)
    n = len(str2)

    d = np.zeros((m + 1, n + 1))
    d[:, 0] = np.arange(m + 1)
    d[0, :] = np.arange(n + 1)

    for j in range(1, n + 1):
        for i in range(1, m + 1):
            if str1[i - 1] == str2[j - 1]:
                d[i][j] = d[i - 1][j - 1]
            else:
                d[i][j] = 1 + min(d[i][j - 1],      # Insert
                                  d[i - 1][j],
                                  d[i - 1][j - 1]) # Delete
    return int(d[m][n])

import spacy
import networkx as nx
import matplotlib.pyplot as plt

# Load the English language model for spaCy
nlp = spacy.load('en_core_web_sm')

def preprocess_text(text):
    # Tokenize the text and perform lemmatization
    doc = nlp(text)
    lemmas = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]
    return lemmas

def calculate_graph_edit_distance(graph1, graph2):
    """Calculate the Graph Edit Distance between two graphs."""
    ged = nx.graph_edit_distance(graph1, graph2)
    return ged

def text_to_graph(text):
    """Convert text to a graph representation using Levenshtein distance."""
    words = preprocess_text(text)
    graph = nx.Graph()
    graph.add_nodes_from(words)

    for i in range(len(words)):
        for j in range(i + 1, len(words)):
            word1 = words[i]
            word2 = words[j]

            lev_dist = levenshtein_distance(word1, word2)

            # Add edge with Levenshtein distance as weight
            graph.add_edge(word1, word2, weight=lev_dist)

    return graph

# Example usage
text1 = "she loves cat"
text2 = "Tom hates dogs, he also hates cats"

graph1 = text_to_graph(text1)
graph2 = text_to_graph(text2)

ged = calculate_graph_edit_distance(graph1, graph2)
similarity = 1 / (1 + ged)

print("Graph Edit Distance:", ged)
print("Similarity:", similarity)

# Create positions for nodes
pos1 = nx.spring_layout(graph1)
pos2 = nx.spring_layout(graph2)

# Visualize the graphs
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
nx.draw_networkx(graph1, pos=pos1, with_labels=True, node_color='lightblue')
edge_labels1 = nx.get_edge_attributes(graph1, 'weight')
nx.draw_networkx_edge_labels(graph1, pos=pos1, edge_labels=edge_labels1)
plt.title("Paragraph 1 Graph")

plt.subplot(1, 2, 2)
nx.draw_networkx(graph2, pos=pos2, with_labels=True, node_color='lightgreen')
edge_labels2 = nx.get_edge_attributes(graph2, 'weight')
nx.draw_networkx_edge_labels(graph2, pos=pos2, edge_labels=edge_labels2)
plt.title("Paragraph 2 Graph")

plt.tight_layout()
plt.show()